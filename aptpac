#!/usr/bin/env bash
#
#               __
#              /\ \__
#   __    _____\ \ ,_\ _____     __      ___
# /'__`\ /\ '__`\ \ \//\ '__`\ /'__`\   /'___\
#/\ \L\.\\ \ \L\ \ \ \\ \ \L\ /\ \L\.\_/\ \__/
#\ \__/.\_\ \ ,__/\ \__\ \ ,__\ \__/.\_\ \____\
# \/__/\/_/\ \ \/  \/__/\ \ \/ \/__/\/_/\/____/
#           \ \_\        \ \_\
#            \/_/         \/_/
# a pacman wrapper with syntax based on debian's apt
# (c) 2019-2020 Fascode Network.
# maintained by Yamada Hayao

APTPAC_VERSION="2.2.0"

set -e

PACMAN_OPTIONS=
AURHELPER=
HELPERS=(
    "/usr/bin/yay"
    "/usr/bin/yaourt"
    "/usr/bin/aurman"
    "/usr/bin/pikaur"
    "/usr/bin/pacaur"
)

DEFAULT_PACMAN_COMMAND="pacman"

debug=false
PACMAN_COMMAND="${DEFAULT_PACMAN_COMMAND}"


_msg_error () {
    echo -e "${@}" >&2
}

_msg_debug () {
    if ${debug}; then
        echo -e "${@}" >&1
    fi
}

if [[ ! "${UID}" = 0 ]]; then
    if [[ -z "${AURHELPER}" ]]; then
        for AURHELPER in ${HELPERS[@]}; do
            if [[ -f "${AURHELPER}" ]]; then
                PACMAN_COMMAND="${AURHELPER}"
                break
            elif hash "$(basename "${AURHELPER}")" 2> /dev/null; then
                PACMAN_COMMAND="$(basename "${AURHELPER}")"
                break
            fi
        done
        if [[ "${PACMAN_COMMAND}" == "${DEFAULT_PACMAN_COMMAND}" ]]; then
            PACMAN_COMMAND="sudo ${DEFAULT_PACMAN_COMMAND}"
        fi
    else
        if [[ -f "${AURHELPER}" ]]; then
            PACMAN_COMMAND="${AURHELPER}"
        elif hash "$(basename "${AURHELPER}")" 2> /dev/null; then
            PACMAN_COMMAND="$(basename "${AURHELPER}")"
        else
            _msg_error "${AURHELPER} is not installed."
            exit 1
        fi
    fi
fi


# List option
installed=false

_usage () {
    echo "usage ${0} [options] [command] [packages]"
    echo " commands:              "
    echo "    install                       Install the specified package."
    echo "    remove                        Remove the specified package."
    echo "    purge                         Permanently remove the package."
    echo "    update                        Update the package database."
    echo "    upgrade                       Update the package."
    echo "    search                        Search for a package."
    echo "    autoremove                    Remove unnecessary packages."
    echo "    clean                         Remove the package cache."
    echo "    list                          Displays a list of packages."
    echo
    echo " general options:       "
    echo "    -y | --yes  | --assume-yes    Do not check."
    echo "    -d | --download-only          Only download the package."
    echo "    -c <file>                     Config file for pacman."
    echo "    -h | --help                   Display this help."
    echo "    -v | --version                Displays the version of pacman."
    echo "    --purge                       Delete the entire configuration file."
}

_exit () {
    exit ${1}
}

_version () {
cat << EOF
aptpac ${APTPAC_VERSION} - A pacman wrapper with syntax based on debian's apt
(c) 2019-2020 Fascode Network. Yamada Hayao
EOF
}


ADD_OPTION () {
    PACMAN_OPTIONS="${PACMAN_OPTIONS} ${@}"
}

# Argument analysis and processing
_opt_short="ydfc:hv"
_opt_long="yes,assume-yes,download-only,fix-broken,purse,installed,debug,help,version"
OPT=$(getopt -o ${_opt_short} -l ${_opt_long} -- "${@}")
if [[ ${?} != 0 ]]; then
    exit 1
fi

eval set -- "${OPT}"
#echo "Argument is \"${OPT}\""
unset OPT _opt_short _opt_long

while true; do
    case ${1} in
        -y | --yes | --assume-yes)
            ADD_OPTION "--noconfirm"
            shift 1
            ;;
        -d | --download-only)
            ADD_OPTION "-w"
            shift 1
            ;;
        -f | --fix-broken)
            shift 1
            ;;
        -c)
            ADD_OPTION "--config ${2}"
            shift 2
            ;;
        --purge)
            ADD_OPTION "-n"
            shift 1
            ;;
        --installed)
            installed=true
            shift 1
            ;;
        --debug)
            debug=true
            shift 1
            ;;
        -h | --help)
            _usage
            shift 1
            exit 0
            ;;
        -v | --version)
            _version
            shift 1
            exit 0
            ;;
        --)
            shift 1
            break
            ;;
        *)
            _msg_error "Invalid argument '${1}'"
            _help
            exit 1
            ;;
    esac
done

if [[ $# -lt 1 ]]; then
    _msg_error "No command specified"
    _usage
    _exit 1
fi
COMMAND="${1}"

shift 1

PACKAGE="${@}"

case "${COMMAND}" in
    install) ADD_OPTION "-S" ;;
    remove) ADD_OPTION "-Rsc" ;;
    purge) ADD_OPTION "-Rsnc" ;;
    update) ADD_OPTION "-Syy" ;;
    upgrade) ADD_OPTION "-Syu" ;;
    search) ADD_OPTION "-Ss" ;;
    full-upgrade) ADD_OPTION "-Syu" ;;
    edit-sources) sudo nano /etc/pacman.conf; _exit 0 ;;
    dist-upgrade) ADD_OPTION "-Syu" ;;
    huawei) 
        if [[ "${LANG}" = "ja_JP.UTF-8" ]]; then
            echo "(ง •ᴗ•)ว ⁾⁾ﾌｧｰｳｪｲでｳｪｲｳｪｲ"
            _exit 0
        else
            _msg_error "Invalid comman '${COMMAND}'"
            _exit 1
        fi
        ;;
    moo)
cat << EOF
         (__) 
         (oo) 
   /------\/ 
  / |    ||   
 *  /\---/\ 
    ~~   ~~   
...."Have you mooed today?"...
EOF
    exit 0
    ;;
    clean)
        ADD_OPTION "-Sccc"
        ;;
    autoremove) if [[ -n $(${PACMAN_COMMAND} -Qttdq) ]]; then
                    ADD_OPTION "=Rsc"
                    PACKAGE="$(${PACMAN_COMMAND} -Qttdq)"
                else
                    echo "No packages to remove."
                    exit 0
                fi
                ;;
    list)
        if ${installed}; then
            ADD_OPTION "-Q | grep"
        else
            ADD_OPTION "-Ss"
        fi
        ;;
    *)
        _msg_error "Invalid comman '${COMMAND}'"
        _exit 1
        ;;
esac

if [[ ! "${PACMAN_COMMAND}" = "pacman" ]] && [[ ! "${PACMAN_COMMAND}" = "sudo pacman" ]]; then
    _msg_debug "Use AUR helper ${PACMAN_COMMAND}."
fi

# echo "${PACMAN_COMMAND} ${PACMAN_OPTIONS} ${PACKAGE}"
${PACMAN_COMMAND} ${PACMAN_OPTIONS} ${PACKAGE}
